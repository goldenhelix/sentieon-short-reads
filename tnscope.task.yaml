name: Tumor Variant Calling with TNScope
description: Variant calling from an alignment file with Sentieon's TNScope algorithm

parameters:
  - name: tumor_sample_name
    label: Tumor Sample Name
    type: string
    help: "The name of the tumor sample to be used in the output VCF file (must match sample name in alignment file)."

  - name: normal_sample_name
    label: Normal Sample Name
    type: string
    help: "The name of the normal sample to be used in the output VCF file (must match sample name in alignment file)."

  - name: input_tumor
    label: Input Alignment File for Tumor Sample
    type: file
    pattern_match:
      - "*.bam"
      - "*.cram"
    create: false
    help: "The input alignment file for the tumor sample."

  - name: input_normal
    label: Input Alignment File for Normal Sample (Optional)
    type: file
    pattern_match:
      - "*.bam"
      - "*.cram"
    create: false
    help: "The input alignment file for the normal sample. If not provided, the workflow will run in tumor-only mode."

  - name: output_folder
    label: Output Folder
    type: directory
    help: "The output folder for the resulting VCF files."

  - name: ref_fasta
    label: Reference File (FASTA)
    type: file
    value: "CloudStorage/resources/hg38_noalt/GCA_000001405.15_GRCh38_no_alt_analysis_set_maskedGRC_exclusions_v2.fasta"

agent_requirements:
  cpu_cores: 8
  memory_gb: 16
  # agent_profile: azure_extra_large

steps:
  - name: tnscope
    description: Run TNscope variant calling
    type: cmd
    docker:
      image: registry.goldenhelix.com/public/sentieon:latest
    args:
      - |-
        set -eu pipefail

        # License configuration
        export SENTIEON_LICENSE="$GH_SERVER:8990"

        num_threads=$AGENT_CPU_CORES
        workdir="/scratch"

        # Check for tumor-only mode
        tumor_only=false
        if [ -z "$input_normal" ]; then
            tumor_only=true
        fi

        # Construct output VCF file name
        tumor_vcf="${output_folder}/${tumor_sample_name}_tumor_tnscope.vcf.gz"
        if [ "$tumor_only" = false ]; then
            normal_vcf="${output_folder}/${normal_sample_name}_normal_dnascope.vcf.gz"
        fi

        # Check if the output VCF already exists
        if [ -f "$tumor_vcf" ]; then
            echo "Output VCF already exists: $tumor_vcf"
            exit 0
        fi

        # Create output folder if it doesn't exist
        mkdir -p "$output_folder" || { echo "Failed to create output directory"; exit 1; }
        cd "$workdir" || { echo "Failed to change to output directory"; exit 1; }
        logfile=${tumor_sample_name}_tnscope_run.log
        exec > >(tee -a "$logfile") 2>&1 || { echo "Failed to redirect stdout and stderr to $logfile"; exit 1; }

        # Copy input files to workdir for better performance
        echo "Copying input files to workdir..."
        echo "Available space in workdir: $(df -h /scratch | awk 'NR==2 {print $4}')"
        cp "$input_file" . || { echo "Failed to copy tumor files to workdir"; exit 1; }

        # Print info
        if [ $tumor_only = false ]; then  
            echo "*************************"
            echo "Running TNscope variant calling in tumor-normal mode..."
            echo "Tumor file:    $input_file"
            echo "Normal file:   $input_normal"
            echo "Output folder: $output_folder"
            echo "CPU Cores:     $AGENT_CPU_CORES"
            echo "Memory:        $AGENT_MEMORY_GB GB"
            echo "*************************"
        else
            echo "*************************"
            echo "Running TNscope variant calling in tumor-only mode..."
            echo "Tumor file:    $input_file"
            echo "Output folder: $output_folder"
            echo "CPU Cores:     $AGENT_CPU_CORES"
            echo "*************************"
        fi

        start_time=$SECONDS

        # Run TNscope variant calling
        sentieon driver -t $num_threads -r "$ref_fasta" \
            -i "$input_tumor" \
            ${input_normal:+-i "$input_normal"} \
            --temp_dir "$workdir" \
            --algo TNscope \
            --disable_detector sv \
            --tumor_sample "$tumor_sample_name" \
            ${input_normal:+--normal_sample "$normal_sample_name"} \
            "$output_vcf" || { echo "TNscope variant calling failed"; exit 1; }

        duration=$((SECONDS - start_time))
        file_size=$(stat -c%s "$output_vcf")
        echo "${tumor_sample_name}_tnscope.vcf.gz ($file_size bytes) called in $duration seconds"
        cp -f ${tumor_sample_name}_tnscope_run.log "$output_folder"/
