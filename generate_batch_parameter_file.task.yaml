name: Generate Batch Parameter File
description: Generate a batch parameter file for Sentieon's TNScope algorithm
auto_generate_session_for_account: "{workspaceBot}"

parameters:
  - name: input_folder
    label: Input Folder
    type: directory
    help: "The input folder for the resulting alignment files, VCFs, and (optional) metrics files."

  - name: sample_type
    label: Sample Type
    type: enum
    choices: [Somatic, Family]
    optional: false

agent_requirements:
  cpu_cores: 1
  memory_gb: 1

steps:
  - name: generate_batch_parameter_file
    description: Generate a batch parameter file
    type: cmd
    docker:
      image: ${VSPIPELINE_DOCKER_IMAGE}
    args:
      - |-
        set -eu pipefail

        # Create output file
        if [ "$sample_type" == "Family" ]; then
            # Use a TSV file to store family relationships
            # This allows us to support comma-separated values in the bam_list column
            output_file="${input_folder}/family_batch_parameters.tsv"
            echo "input_file" > "$output_file"
        elif [ "$sample_type" == "Somatic" ]; then 
            output_file="${input_folder}/batch_parameters.csv"
            echo "tumor_sample_name,normal_sample_name,input_tumor,input_normal" > "$output_file"
        else
            echo "Invalid sample type: $sample_type"
            exit 1
        fi

        # Find sample names from BAM/CRAM files by taking the prefix before first underscore
        sample_names=$(find "$input_folder" -maxdepth 1 -type f \( -name "*.bam" -o -name "*.cram" \) | 
            while read -r file; do
                basename "$file" | cut -d'_' -f1
            done | sort -u)

        # Handle somatic or family case
        case "$sample_type" in 
            "Somatic")
                for sample_name in $sample_names; do

                    # Check if sample is in catalog 
                    echo "Looking up sample: $sample_name...."
                    echo "Running query Sample:eq:$sample_name"
                    
                    # Check if sample is a tumor sample
                    tumor_sample=$(gautil client catalog-export SampleCatalog Sample:eq:"$sample_name" --fields="Tumor" | tail -n 1 | tr -d '\r\n\t ')
                    
                    case "$tumor_sample" in
                        "")
                            echo "Sample $sample_name not found in catalog"
                            echo "Skipping sample"
                            continue
                            ;;
                        "Tumor")
                            echo "Sample $sample_name is a tumor sample; adding to batch parameter file"
                            ;;
                        "Normal")
                            echo "Sample $sample_name is a normal sample; skipping sample"
                            continue
                            ;;
                        *)
                            echo "Sample $sample_name is not a tumor or normal sample"
                            echo "Skipping sample"
                            continue
                            ;;
                    esac

                    # Add sample to batch parameter file
                    sample_bam=$(find "$input_folder" -maxdepth 1 -type f \( -name "${sample_name}_*.bam" -o -name "${sample_name}_*.cram" \) | head -n 1)
                    sample_abs=$(echo "$sample_bam" | sed "s|^$WORKSPACE_DIR||")

                    if [ -z "$sample_bam" ]; then
                        echo "No BAM/CRAM file found for sample $sample_name"
                        continue
                    fi
                    echo "Found BAM/CRAM file: $sample_abs"

                    # First, look up normal sample
                    normal_sample_name="$(gautil client catalog-export SampleCatalog Sample:eq:"$sample_name" --fields="NormalSample" | tail -n 1 | tr -d '\r\n\t ')"
                    if [ -z "$normal_sample_name" ]; then
                        echo "No matched normal sample found for $sample_name"
                        echo "$sample_name,,$sample_abs," >> "$output_file"
                    else
                        normal_sample_bam=$(find "$input_folder" -maxdepth 1 -type f \( -name "${normal_sample_name}_*.bam" -o -name "${normal_sample_name}_*.cram" \) | head -n 1)
                        normal_sample_abs=$(echo "$normal_sample_bam" | sed "s|^$WORKSPACE_DIR||")
                        echo "Found normal sample: $normal_sample_name"
                        echo "Found normal BAM/CRAM file: $normal_sample_abs"
                        echo "$sample_name,$normal_sample_name,$sample_abs,$normal_sample_abs" >> "$output_file"
                    fi

                done
                ;;

            "Family")
                for sample_name in $sample_names; do

                    # Check if sample is already in batch file
                    if grep -q "$sample_name" "$output_file"; then
                        echo "Sample $sample_name already in batch file"
                        continue
                    fi

                    # Check if sample is in catalog
                    echo "Looking up sample: $sample_name...."
                    echo "Running query Sample:eq:$sample_name"

                    # Look for family relationships in catalog
                    sample_family=$(gautil client catalog-export SampleCatalog Sample:eq:"$sample_name" --fields="Mother","Father" --output=tsv | tail -n 1 | tr -d '\r\n ')

                    # If sample family is empty, skip
                    if [ -z "$sample_family" ]; then
                        echo "Sample $sample_name has no parents defined in catalog "
                        echo "Skipping sample"
                        continue
                    fi
                    # Parse family relationships
                    mother=$(echo "$sample_family" | cut -f1)
                    father=$(echo "$sample_family" | cut -f2)
                    echo "Sample $sample_name is in family with mother: $mother and father: $father"

                    # Find BAM for sample, mother, and father
                    sample_bam=$(find "$input_folder" -maxdepth 1 -type f \( -name "${sample_name}_*.bam" -o -name "${sample_name}_*.cram" \) | head -n 1)
                    sample_abs=$(echo "$sample_bam" | sed "s|^$WORKSPACE_DIR||")
                    mother_bam=$(find "$input_folder" -maxdepth 1 -type f \( -name "${mother}_*.bam" -o -name "${mother}_*.cram" \) | head -n 1)
                    mother_abs=$(echo "$mother_bam" | sed "s|^$WORKSPACE_DIR||")
                    father_bam=$(find "$input_folder" -maxdepth 1 -type f \( -name "${father}_*.bam" -o -name "${father}_*.cram" \) | head -n 1)
                    father_abs=$(echo "$father_bam" | sed "s|^$WORKSPACE_DIR||")

                    # Check if sample BAM exists (required)
                    if [ -z "$sample_bam" ]; then
                        echo "No BAM/CRAM file found for sample $sample_name"
                        continue
                    fi

                    # Echo found BAMs and add to output file
                    echo "Found BAM/CRAM files:"
                    echo "  Sample: $sample_abs"
                    if [ ! -z "$mother_bam" ]; then
                        echo "  Mother: $mother_abs"
                    else
                        echo "  Mother: Not found"
                        mother_abs=""
                    fi
                    if [ ! -z "$father_bam" ]; then
                        echo "  Father: $father_abs"
                    else
                        echo "  Father: Not found"
                        father_abs=""
                    fi
                    echo "$sample_abs,$mother_abs,$father_abs" >> "$output_file"

                done
                ;;

            *)
                echo "Invalid sample type: $sample_type"
                exit 1
                ;;
        esac
