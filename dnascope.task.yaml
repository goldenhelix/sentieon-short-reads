name: Variant Calling with DNAscope 
description: Variant calling from an alignment file with Sentieon's DNAscope algorithm

parameters:
  - name: sample_name
    label: Sample Name
    type: string
    optional: true

  - name: input_file
    label: Input Alignment File
    type: file
    supports_location_mode: 'read_only'
    pattern_match:
      - "*.bam"
      - "*.cram"
    create: false
    list: true

  - name: output_folder
    label: Output Folder
    type: directory
    supports_location_mode: 'no_append'

  - name: ref_fasta
    label: Reference File (FASTA)
    type: file
    supports_location_mode: 'read_only'
    optional: true

  - name: ml_model
    value: "None"
    label: Machine Learning Model
    type: enum
    choices: [None, Element Biosciences WGS 2.0, Illumina WES 2.1, Illumina WGS 2.2,
              MGI WES 2.0, MGI WGS 2.0, Salus WES 1.0, Salus WGS 1.0, 
              Ultima Genomics WGS 1.0]
    optional: false

  - name: model_base_path
    label: Sentieon Models Base Path
    group: Advanced Options 
    type: directory
    supports_location_mode: 'read_only'
    value: "CloudStorage/resources/sentieon_models"

  - name: pcr_free
    label: PCR Free Sample
    type: boolean
    value: "false"
    help: Set to true if the sample is PCR-free library prep for WGS

  - name: output_gvcf
    label: Output GVCF
    type: boolean
    value: "false"
    help: Set to true to output GVCF format instead of VCF

  - name: joint_calling
    label: Joint Calling
    type: boolean
    value: "false"
    help: Set to true to run joint-calling for each set of inputs

  - name: copy_fasta_to_workdir
    label: Copy Reference FASTA to Working Directory
    type: boolean
    value: "true"
    help: Set to false to use the reference FASTA from cloud or local storage instead of copying to the working directory

agent_requirements:
  cpu_cores: 16
  memory_gb: 16

steps:
  - name: dnascope
    description: Run Sentieon DNAscope variant calling
    type: cmd
    docker:
      image: registry.goldenhelix.com/public/sentieon:202503
    args:
      - |-
        set -eu pipefail

        # License configuration
        export SENTIEON_LICENSE="$GH_SERVER:8990"

        num_threads=$AGENT_CPU_CORES
        workdir="/scratch"

        # Collect parameters

        # Parse list of input files by cutting list on commas
        # Handle both single files and comma-separated lists properly
        if [[ "$input_file" == *,* ]]; then
          # Multiple files separated by commas
          IFS=',' read -ra input_files <<< "$input_file"
        else
          # Single file - create array with single element
          input_files=("$input_file")
        fi
        for file in "${input_files[@]}"; do
          echo "Input file: $file"
        done
        # Check if more than one input file is provided and sample name is given
        if [ ${#input_files[@]} -gt 1 ] && [ ! -z "$sample_name" ]; then
          echo "Sample name should not be provided for multiple input files, ignoring sample name"
        fi

        echo "Selecting reference file..."
        if [ -z "$ref_fasta" ]; then 
          echo "No reference file provided, using default reference file..."
          ref_fasta="$WORKSPACE_DIR/${RESOURCES_PATH}/${REFERENCE_PATH}"
          if [ ! -f "$ref_fasta" ]; then
            echo "The default reference file does not exist at $ref_fasta"
            echo "Please run the task Download Genomic Reference to download the reference and then re-run this task"
            exit 1
          fi
        fi

        echo "Selecting model base path..."
        if [ -z "$model_base_path" ]; then
          echo "No model base path provided, using default model base path..."
          model_base_path="$WORKSPACE_DIR/${RESOURCES_PATH}/sentieon_models"
          if [ ! -d "$model_base_path" ]; then
            echo "The default model base path does not exist at $model_base_path"
            echo "Please run the task Download Sentieon Models to download the models and then re-run this task"
            exit 1
          fi
        fi

        echo "Selecting model file..."
        case "$ml_model" in

          "None")
            model_path=""
            ;;

          "Illumina WES 2.1")
            model_path="${model_base_path}/DNAscopeIlluminaWES2.1.bundle"
            ;;

          "Illumina WGS 2.2")
            model_path="${model_base_path}/SentieonIlluminaWGS2.2.bundle"
            ;;

          "Element Biosciences WGS 2.0")
            model_path="${model_base_path}/DNAscopeElementBioWGS2.0.bundle"
            ;;

          "MGI WES 2.0")
            model_path="${model_base_path}/DNAscopeMGIWES2.0.bundle"
            ;;

          "MGI WGS 2.0")
            model_path="${model_base_path}/DNAscopeMGIWGS2.0.bundle"
            ;;

          "Salus WES 1.0")
            model_path="${model_base_path}/DNAscopeSalusWES1.0.bundle"
            ;;

          "Salus WGS 1.0")
            model_path="${model_base_path}/DNAscopeSalusWGS1.0.bundle"
            ;;

          "Ultima Genomics WGS 1.0")
            model_path="${model_base_path}/SentieonUltima1.0.bundle"
            ;;

          *)
            model_path=""
            ;;

        esac

        # Run analysis for each input file
        for input_file in "${input_files[@]}"; do

          # Define sample name; check if length of input_files is greater than 1 and sample_name is not provided
          if [ ${#input_files[@]} -gt 1 ] || [ -z "$sample_name" ]; then
            sample_name=$(basename "$input_file" | cut -d '_' -f 1)
          fi

          pattern=" | "
          if [[ "$sample_name" =~ "$pattern" ]]; then
            echo "Sample name should not contain whitespace"
            exit 1
          fi

          # Define metrics directory path
          metrics_dir="${output_folder}/${sample_name}_metrics"

          echo "Starting analysis for $sample_name..."

          mkdir -p "$output_folder" || { echo "Failed to create output directory"; exit 1; }
          cd "$workdir" || { echo "Failed to change to output directory"; exit 1; }
          logfile=${sample_name}_dnascope_run.log
          exec > >(tee -a "$logfile") 2>&1 || { echo "Failed to redirect stdout and stderr to $logfile"; exit 1; }

          # Copy input files to workdir for better performance
          echo "Copying input files to workdir..."
          echo "Available space in workdir: $(df -h /scratch | awk 'NR==2 {print $4}')"
          input_basename=$(basename "$input_file")
          cp "$input_file"* . || { echo "Failed to copy input files to workdir"; exit 1; }

          # Copy reference FASTA locally for better performance
          if [ "$copy_fasta_to_workdir" = true ]; then
            echo "Copying reference FASTA to workdir..."
            cp "$ref_fasta" . || { echo "Failed to copy reference FASTA"; exit 1; }
            cp "$ref_fasta".fai . || { echo "Failed to copy reference FASTA index"; exit 1; }
            local_ref_fasta=$(basename "$ref_fasta")
          else
            echo "Using reference FASTA from resource storage..."
            local_ref_fasta="$ref_fasta"
          fi

          # Construct extra parameters based on settings
          extra_params=""
          if [ "$pcr_free" = true ]; then
              extra_params="$extra_params --pcr_indel_model none"
          fi
          if [ "$output_gvcf" = true ]; then
              extra_params="$extra_params --emit_mode gvcf"
              output_suffix="g.vcf.gz"
          else
              output_suffix="vcf.gz"
          fi

          # Print info
          echo "*************************"
          echo "Running DNAscope variant calling..."
          echo "ML Model:      $model_path"
          echo "Input file:    $input_basename"
          echo "Output folder: $output_folder"
          echo "CPU Cores:     $AGENT_CPU_CORES"
          echo "Memory:        $AGENT_MEMORY_GB GB"
          echo "PCR Free:      $pcr_free"
          echo "Output GVCF:   $output_gvcf"
          echo "*************************"

          # Run DNAscope variant calling
          start_time=$SECONDS

          if [[ ! -z "$model_path" ]]; then
            sentieon driver -r "$local_ref_fasta" -t $num_threads -i "$input_basename" --temp_dir "$workdir" \
              --algo DNAscope --model "$model_path/dnascope.model" $extra_params \
              "${sample_name}_dnascope_tmp.$output_suffix" || \
              { echo "DNAscope variant calling failed"; exit 1; }

            sentieon driver -r "$local_ref_fasta" -t $num_threads --temp_dir "$workdir" \
              --algo DNAModelApply --model "$model_path/dnascope.model" \
              -v "${sample_name}_dnascope_tmp.$output_suffix" "${output_folder}/${sample_name}_dnascope.$output_suffix" || \
              { echo "DNAModelApply failed"; exit 1; }
          else
            sentieon driver -r "$local_ref_fasta" -t $num_threads -i "$input_basename" --temp_dir "$workdir" \
              --algo DNAscope $extra_params \
              "${output_folder}/${sample_name}_dnascope.$output_suffix" || \
              { echo "DNAscope variant calling failed"; exit 1; }
          fi

          duration=$((SECONDS - start_time))
          file_size=$(stat -c%s "${output_folder}/${sample_name}_dnascope.$output_suffix")
          echo "${sample_name}_dnascope.$output_suffix ($file_size bytes) called in $duration seconds"
          cp -f ${sample_name}_dnascope_run.log "$output_folder"/

        done
